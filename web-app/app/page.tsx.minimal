'use client';

import React, { useState, useEffect } from 'react';
import { Search, Filter, ChevronDown, ChevronUp, ExternalLink, Users, FileText, X, BarChart3, User, MessageCircle, Trophy, Lightbulb, HelpCircle, ThumbsUp, ThumbsDown } from 'lucide-react';
import { usePrivy } from '@privy-io/react-auth';
import Link from 'next/link';
import VoteButtons from './components/VoteButtons';
import CommentSection from './components/CommentSection';
import ChatModal from './components/ChatModal';
import { UnifiedElement, SubmissionElement, CommentElement, ReactionElement } from './components/UnifiedElement';

interface DesirableProperty {
  id: string;
  name: string;
  category: string;
  description: string;
  elements: Array<{
    name: string;
    description: string;
  }>;
  landing_title?: string;
  landing_subtitle?: string;
  landing_text?: string;
}

interface ApiResponse {
  meta: {
    title: string;
    description: string;
    version: string;
    total_properties: number;
    categories: string[];
  };
  desirable_properties: DesirableProperty[];
}

interface Submission {
  id: string;
  title: string;
  overview: string;
  sourceLink: string | null;
  submitter: {
    firstName: string | null;
    lastName: string | null;
    email: string | null;
  };
  directlyAddressedDPs: Array<{
    dp: string;
    summary: string;
  }>;
  clarificationsExtensions: Array<{
    dp: string;
    type: string;
    title: string;
    content: string;
    whyItMatters: string;
  }>;
  upvotes: number;
  downvotes: number;
}

type TabType = 'properties' | 'submissions' | 'categories';

// Modal component
function Modal({ open, onClose, children }: { open: boolean; onClose: () => void; children: React.ReactNode }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60">
      <div className="bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto relative border border-gray-700">
        <button
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-200"
          onClick={onClose}
          aria-label="Close"
        >
          <X className="h-6 w-6" />
        </button>
        <div className="p-6">{children}</div>
      </div>
    </div>
  );
}

export default function DesirablePropertiesApp() {
  const privy = usePrivy();
  const { user, login, logout, authenticated, ready } = privy || {};
  const [data, setData] = useState<ApiResponse | null>(null);
  const [submissions, setSubmissions] = useState<Submission[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [expandedProperties, setExpandedProperties] = useState<Set<string>>(new Set());
  const [expandedSubmissions, setExpandedSubmissions] = useState<Set<number>>(new Set());
  const [activeTab, setActiveTab] = useState<TabType>('properties');
  const [dpDetail, setDpDetail] = useState<DesirableProperty | null>(null);
  const [submissionDetail, setSubmissionDetail] = useState<Submission | null>(null);
  const [visibleComments, setVisibleComments] = useState<Set<string>>(new Set());
  const [searchResults, setSearchResults] = useState<any>(null);
  const [searchLoading, setSearchLoading] = useState(false);
  const [chatModalOpen, setChatModalOpen] = useState(false);
  const [expandedComments, setExpandedComments] = useState<Set<string>>(new Set());
  const [voteCounts, setVoteCounts] = useState<Record<string, { upvotes: number; downvotes: number; userVote?: 'UP' | 'DOWN' | null }>>({});
  const [commentCounts, setCommentCounts] = useState<Record<string, number>>({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Fetch desirable properties data
        const propertiesResponse = await fetch(`/api/desirable-properties?t=${Date.now()}`);
        if (!propertiesResponse.ok) {
          throw new Error('Failed to fetch desirable properties');
        }
        const propertiesData: ApiResponse = await propertiesResponse.json();
            // console.log('Loaded properties:', propertiesData.desirable_properties.length);
    // console.log('Sample property:', propertiesData.desirable_properties[0]);
    // console.log('Sample property landing fields:', {
    //   landing_title: propertiesData.desirable_properties[0]?.landing_title,
    //   landing_subtitle: propertiesData.desirable_properties[0]?.landing_subtitle,
    //   landing_text: propertiesData.desirable_properties[0]?.landing_text
    // });
        setData(propertiesData);
        
        // Fetch submissions data
        const submissionsResponse = await fetch(`/api/submissions?t=${Date.now()}`);
        if (!submissionsResponse.ok) {
          throw new Error('Failed to fetch submissions');
        }
        const submissionsData: { submissions: Submission[] } = await submissionsResponse.json();
        // console.log('Loaded submissions:', submissionsData.submissions?.length);
        const submissionsList = submissionsData.submissions || [];
        setSubmissions(submissionsList);
        // Pre-fetch all comment and vote counts for all submissions
        fetchAllSubmissionCounts(submissionsList);
        
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    
    // Fetch and display build version
    setTimeout(() => {
      fetch(`/api/version?t=${Date.now()}`)
        .then(response => response.json())
        .then(data => {
          const buildElement = document.getElementById('build-version');
          if (buildElement && data.build) {
            buildElement.textContent = data.build;
          }
        })
        .catch(error => {
          console.error('Failed to fetch version:', error);
          const buildElement = document.getElementById('build-version');
          if (buildElement) {
            buildElement.textContent = 'Unknown';
          }
        });
    }, 1000); // Wait 1 second for DOM to be ready
  }, []);

  // Re-fetch counts when submissions tab is activated
  useEffect(() => {
    if (activeTab === 'submissions' && submissions.length > 0) {
      console.log('ðŸ”´ [MainPage] Submissions tab activated, re-fetching all counts');
      fetchAllSubmissionCounts(submissions);
    }
  }, [activeTab, submissions]);

  // Handle hash and URL parameter navigation
  useEffect(() => {
    const handleHashAndParams = () => {
      if (!data) return; // Wait for data to load

      const hash = window.location.hash;
      const urlParams = new URLSearchParams(window.location.search);
      
      // console.log('Hash:', hash, 'URL params:', urlParams.toString());

      // Check for hash-based navigation (#dp3, #dp15, etc.)
      if (hash && hash.startsWith('#dp')) {
        const dpId = hash.substring(1).toUpperCase(); // Remove # and convert to uppercase
        // console.log('Looking for DP from hash:', dpId);
        
        const dp = getDPByIdOrName(dpId);
        if (dp) {
          // console.log('Opening DP modal from hash:', dp.name);
          setDpDetail(dp);
          setSubmissionDetail(null);
        } else {
          // console.log('DP not found for hash:', dpId);
        }
      }
      
      // Check for URL parameter navigation (?DP4, ?dp7, etc.)
      const dpParam = urlParams.get('dp') || urlParams.get('DP');
      if (dpParam) {
        const dpId = dpParam.toUpperCase();
        // console.log('Looking for DP from URL param:', dpId);
        
        const dp = getDPByIdOrName(dpId);
        if (dp) {
          // console.log('Opening DP modal from URL param:', dp.name);
          setDpDetail(dp);
          setSubmissionDetail(null);
        } else {
          // console.log('DP not found for URL param:', dpId);
        }
      }
    };

    // Handle initial load
    handleHashAndParams();

    // Listen for hash changes
    const handleHashChange = () => {
      // console.log('Hash changed to:', window.location.hash);
      handleHashAndParams();
    };

    // Listen for URL parameter changes (popstate event)
    const handlePopState = () => {
      // console.log('URL changed to:', window.location.href);
      handleHashAndParams();
    };

    window.addEventListener('hashchange', handleHashChange);
    window.addEventListener('popstate', handlePopState);
    
    // Also listen for pushstate/replacestate (for programmatic URL changes)
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = function(...args) {
      originalPushState.apply(history, args);
      setTimeout(handleHashAndParams, 0);
    };
    
    history.replaceState = function(...args) {
      originalReplaceState.apply(history, args);
      setTimeout(handleHashAndParams, 0);
    };
    
    return () => {
      window.removeEventListener('hashchange', handleHashChange);
      window.removeEventListener('popstate', handlePopState);
      history.pushState = originalPushState;
      history.replaceState = originalReplaceState;
    };
  }, [data]); // Re-run when data loads

  // Debug useEffect for modal states
  useEffect(() => {
    // console.log('dpDetail state changed:', dpDetail?.name || 'null');
  }, [dpDetail]);

  useEffect(() => {
    // console.log('submissionDetail state changed:', submissionDetail?.title || 'null');
  }, [submissionDetail]);

  const toggleProperty = (propertyId: string) => {
    const newExpanded = new Set(expandedProperties);
    if (newExpanded.has(propertyId)) {
      newExpanded.delete(propertyId);
    } else {
      newExpanded.add(propertyId);
    }
    setExpandedProperties(newExpanded);
  };

  const toggleSubmission = (submissionNumber: number) => {
    const newExpanded = new Set(expandedSubmissions);
    if (newExpanded.has(submissionNumber)) {
      newExpanded.delete(submissionNumber);
    } else {
      newExpanded.add(submissionNumber);
    }
    setExpandedSubmissions(newExpanded);
  };

  // Search function that calls the API
  const performSearch = async (query: string) => {
    if (!query.trim()) {
      setSearchResults(null);
      return;
    }

    try {
      setSearchLoading(true);
      // console.log('Performing search for:', query);
      
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      if (!response.ok) {
        throw new Error('Search failed');
      }
      
      const results = await response.json();
      // console.log('Search results:', results);
      setSearchResults(results);
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults(null);
    } finally {
      setSearchLoading(false);
    }
  };

  // Debounced search effect
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (searchTerm.trim()) {
        performSearch(searchTerm);
      } else {
        setSearchResults(null);
      }
    }, 300); // 300ms delay

    return () => clearTimeout(timeoutId);
  }, [searchTerm]);

  const filteredProperties = data?.desirable_properties.filter(property => {
    const matchesSearch = property.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         property.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || property.category === selectedCategory;
    return matchesSearch && matchesCategory;
  }) || [];

  const filteredSubmissions = submissions.filter(submission => {
    const searchLower = searchTerm.toLowerCase();
    return submission.title.toLowerCase().includes(searchLower) ||
           submission.overview.toLowerCase().includes(searchLower) ||
           (Array.isArray(submission.directlyAddressedDPs) && submission.directlyAddressedDPs.some(dp => 
             dp.dp.toLowerCase().includes(searchLower) || 
             dp.summary.toLowerCase().includes(searchLower)
           ));
  });

  // Helper: Find all submissions aligned to a DP
  const getSubmissionsForDP = (dpId: string) => {
    // console.log('getSubmissionsForDP called with:', dpId);
    const result = submissions.filter(sub =>
      Array.isArray(sub.directlyAddressedDPs) && sub.directlyAddressedDPs.some(dp => {
        // Extract DP number from both strings for exact matching
        const dpNumber = dp.dp.match(/^DP(\d+)/)?.[1];
        const targetNumber = dpId.match(/^DP(\d+)/)?.[1];
        
        // Exact DP number match
        if (dpNumber && targetNumber && dpNumber === targetNumber) {
          return true;
        }
        
        // Fallback to original logic for non-numeric cases
        return dp.dp.replace(/^DP\d+\s*-\s*/, '').trim() === dpId.replace(/^DP\d+\s*-\s*/, '').trim() || 
               dp.dp === dpId;
      })
    );
    
    // Deduplicate submissions by title and submitter
    const uniqueSubmissions = result.filter((sub, index, self) => {
                const key = `${sub.title}-${sub.submitter.firstName}-${sub.submitter.lastName}`;
              return index === self.findIndex(s => 
          `${s.title}-${s.submitter.firstName}-${s.submitter.lastName}` === key
        );
    });
    
    // console.log('Found submissions:', result.length, 'Unique submissions:', uniqueSubmissions.length);
    return uniqueSubmissions;
  };

  // Helper: Find DP by id or name
  const getDPByIdOrName = (idOrName: string) => {
    // console.log('getDPByIdOrName called with:', idOrName);
    
    // First try exact match
    let result = data?.desirable_properties.find(dp => dp.id === idOrName || dp.name === idOrName);
    
    // If no exact match, try to extract DP ID from format like "DP1 - Federated Authentication & Accountability"
    if (!result && idOrName.includes(' - ')) {
      const dpId = idOrName.split(' - ')[0];
      result = data?.desirable_properties.find(dp => dp.id === dpId);
    }
    
    // If still no match and it's a number, try adding "DP" prefix
    if (!result && /^\d+$/.test(idOrName)) {
      const dpId = `DP${idOrName}`;
      console.log('Trying with DP prefix:', dpId);
      result = data?.desirable_properties.find(dp => dp.id === dpId);
    }
    
    // If still no match, try partial name matching
    if (!result) {
      result = data?.desirable_properties.find(dp => 
        dp.name.toLowerCase().includes(idOrName.toLowerCase()) ||
        idOrName.toLowerCase().includes(dp.name.toLowerCase())
      );
    }
    
    console.log('Found DP:', result);
    return result;
  };

  // Helper function to get top DPs by type
  const toggleComments = (elementId: string) => {
    setExpandedComments(prev => {
      const newSet = new Set(prev);
      if (newSet.has(elementId)) {
        newSet.delete(elementId);
      } else {
        newSet.add(elementId);
      }
      return newSet;
    });
  };

  const updateCommentCount = (elementId: string, count: number) => {
    // Always log for Scott Yates submission
    const isScottYatesSubmission = elementId.includes('cmds3zumt00s3h2108o3bojs9');
    if (isScottYatesSubmission) {
      console.log('ðŸ”´ [MainPage] updateCommentCount called for Scott Yates submission - elementId:', elementId, 'new count:', count);
    }
    setCommentCounts(prev => {
      const newCounts = {
        ...prev,
        [elementId]: count
      };
      if (isScottYatesSubmission) {
        console.log('ðŸ”´ [MainPage] Updated commentCounts state:', newCounts);
      }
      return newCounts;
    });
  };

  // Pre-fetch all comment counts for a submission
  const fetchAllCommentCounts = async (submission: Submission) => {
    if (submission.id.includes('cmds3zumt00s3h2108o3bojs9')) {
      console.log('ðŸ”´ [MainPage] Pre-fetching all comment counts for Scott Yates submission');
    }
    
    try {
      // Fetch submission-level comments
      const submissionResponse = await fetch(`/api/comments?submissionId=${submission.id}`);
      if (submissionResponse.ok) {
        const submissionComments = await submissionResponse.json();
        const submissionCount = Array.isArray(submissionComments) ? submissionComments.length : 0;
        updateCommentCount(submission.id, submissionCount);
        
        if (submission.id.includes('cmds3zumt00s3h2108o3bojs9')) {
          console.log('ðŸ”´ [MainPage] Pre-fetched submission comment count:', submissionCount);
        }
      }
      
      // Fetch comments for each DP
      for (let dpIndex = 0; dpIndex < (submission.directlyAddressedDPs?.length || 0); dpIndex++) {
        const dpElementId = `${submission.id}-dp-${dpIndex}`;
        const dpResponse = await fetch(`/api/comments?submissionId=${submission.id}&elementId=${dpElementId}&elementType=alignment`);
        if (dpResponse.ok) {
          const dpComments = await dpResponse.json();
          const dpCount = Array.isArray(dpComments) ? dpComments.length : 0;
          updateCommentCount(dpElementId, dpCount);
          
          if (submission.id.includes('cmds3zumt00s3h2108o3bojs9')) {
            console.log('ðŸ”´ [MainPage] Pre-fetched DP comment count:', dpCount, 'for elementId:', dpElementId);
          }
        }
      }
      
      // Fetch comments for each Clarification/Extension
      for (let ceIndex = 0; ceIndex < (submission.clarificationsExtensions?.length || 0); ceIndex++) {
        const ceElementId = `${submission.id}-ce-${ceIndex}`;
        const ceType = submission.clarificationsExtensions[ceIndex].type.toLowerCase();
        const ceResponse = await fetch(`/api/comments?submissionId=${submission.id}&elementId=${ceElementId}&elementType=${ceType}`);
        if (ceResponse.ok) {
          const ceComments = await ceResponse.json();
          const ceCount = Array.isArray(ceComments) ? ceComments.length : 0;
          updateCommentCount(ceElementId, ceCount);
          
          if (submission.id.includes('cmds3zumt00s3h2108o3bojs9')) {
            console.log('ðŸ”´ [MainPage] Pre-fetched CE comment count:', ceCount, 'for elementId:', ceElementId);
          }
        }
      }
      
      if (submission.id.includes('cmds3zumt00s3h2108o3bojs9')) {
        console.log('ðŸ”´ [MainPage] Completed pre-fetching all comment counts for Scott Yates submission');
      }
    } catch (error) {
      console.error('Error pre-fetching comment counts:', error);
    }
  };

  // Pre-fetch all comment and vote counts for all submissions
  const fetchAllSubmissionCounts = async (submissionsList: Submission[]) => {
    console.log('ðŸ”´ [MainPage] Pre-fetching all comment and vote counts for all submissions');
    
    try {
      for (const submission of submissionsList) {
        // Pre-fetch comment counts for this submission
        await fetchAllCommentCounts(submission);
        
        // Pre-fetch vote counts and user vote state for submission-level
        const voteResponse = await fetch(`/api/votes?submissionId=${submission.id}`);
        if (voteResponse.ok) {
          const voteData = await voteResponse.json();
          setVoteCounts(prev => ({
            ...prev,
            [submission.id]: {
              upvotes: voteData.upvotes || 0,
              downvotes: voteData.downvotes || 0,
              userVote: voteData.userVote || null // Include user's vote state
            }
          }));
        }
        
        // Pre-fetch vote counts and user vote state for each DP
        for (let dpIndex = 0; dpIndex < (submission.directlyAddressedDPs?.length || 0); dpIndex++) {
          const dpElementId = `${submission.id}-dp-${dpIndex}`;
          const dpVoteResponse = await fetch(`/api/votes?submissionId=${submission.id}&elementId=${dpElementId}&elementType=alignment`);
          if (dpVoteResponse.ok) {
            const dpVoteData = await dpVoteResponse.json();
            setVoteCounts(prev => ({
              ...prev,
              [dpElementId]: {
                upvotes: dpVoteData.upvotes || 0,
                downvotes: dpVoteData.downvotes || 0,
                userVote: dpVoteData.userVote || null // Include user's vote state
              }
            }));
          }
        }
        
        // Pre-fetch vote counts and user vote state for each Clarification/Extension
        for (let ceIndex = 0; ceIndex < (submission.clarificationsExtensions?.length || 0); ceIndex++) {
          const ceElementId = `${submission.id}-ce-${ceIndex}`;
          const ceType = submission.clarificationsExtensions[ceIndex].type.toLowerCase();
          const ceVoteResponse = await fetch(`/api/votes?submissionId=${submission.id}&elementId=${ceElementId}&elementType=${ceType}`);
          if (ceVoteResponse.ok) {
            const ceVoteData = await ceVoteResponse.json();
            setVoteCounts(prev => ({
              ...prev,
              [ceElementId]: {
                upvotes: ceVoteData.upvotes || 0,
                downvotes: ceVoteData.downvotes || 0,
                userVote: ceVoteData.userVote || null // Include user's vote state
              }
            }));
          }
        }
      }
      
      console.log('ðŸ”´ [MainPage] Completed pre-fetching all counts for all submissions');
    } catch (error) {
      console.error('Error pre-fetching all submission counts:', error);
    }
  };

  // Abstracted function to open submission detail modal
  const openSubmissionDetail = (submission: Submission) => {
    setSubmissionDetail(submission);
    // Pre-fetch comment counts for this submission
    fetchAllCommentCounts(submission);
  };

  // Calculate total comment count for a submission (including all elements)
  const getTotalCommentCount = (submission: Submission) => {
    let total = commentCounts[submission.id] || 0;
    
    // Add comments on alignment elements
    if (Array.isArray(submission.directlyAddressedDPs)) {
      submission.directlyAddressedDPs.forEach((_, dpIndex) => {
        total += commentCounts[`${submission.id}-dp-${dpIndex}`] || 0;
      });
    }
    
    // Add comments on clarification/extension elements
    if (Array.isArray(submission.clarificationsExtensions)) {
      submission.clarificationsExtensions.forEach((item, itemIndex) => {
        total += commentCounts[`${item.type.toLowerCase()}-${submission.id}-${itemIndex}`] || 0;
      });
    }
    
    return total;
  };

  const getTopDPs = (type: 'alignments' | 'clarifications' | 'extensions') => {
    const dpCounts: { [key: string]: number } = {};
    
    submissions.forEach(submission => {
      if (type === 'alignments') {
        if (Array.isArray(submission.directlyAddressedDPs)) {
          submission.directlyAddressedDPs.forEach(dp => {
            dpCounts[dp.dp] = (dpCounts[dp.dp] || 0) + 1;
          });
        }
      } else {
        if (Array.isArray(submission.clarificationsExtensions)) {
          submission.clarificationsExtensions
            .filter(ce => ce.type === (type === 'clarifications' ? 'Clarification' : 'Extension'))
            .forEach(ce => {
              dpCounts[ce.dp] = (dpCounts[ce.dp] || 0) + 1;
            });
        }
      }
    });
    
    return Object.entries(dpCounts)
      .map(([dp, count]) => ({ dp, count }))
      .sort((a, b) => b.count - a.count);
  };



  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-600 mx-auto"></div>
          <p className="mt-4 text-gray-300">Loading data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-red-900/20 border border-red-500/50 text-red-400 px-4 py-3 rounded">
            Error: {error}
          </div>
        </div>
      </div>
    );
  }

  // DP Detail Modal
  const renderDPDetail = (dp: DesirableProperty) => {
    // console.log('renderDPDetail called for:', dp.name);
    // console.log('DP landing fields:', {
    //   landing_title: dp.landing_title,
    //   landing_subtitle: dp.landing_subtitle,
    //   landing_text: dp.landing_text
    // });
    const relatedSubmissions = getSubmissionsForDP(dp.id);
    return (
      <div>
        {/* Landing fields at the top */}
        {(dp.landing_title || dp.landing_subtitle || dp.landing_text) && (
          <div className="mb-8">
            {dp.landing_title && <h1 className="text-3xl font-bold text-cyan-400 mb-2">{dp.landing_title}</h1>}
            {dp.landing_subtitle && <h2 className="text-xl text-cyan-200 mb-2">{dp.landing_subtitle}</h2>}
            {dp.landing_text && <p className="text-gray-200 mb-4">{dp.landing_text}</p>}
          </div>
        )}
        <h2 className="text-2xl font-bold mb-2 text-white">{dp.name} <span className="text-xs bg-cyan-600 text-white px-2 py-0.5 rounded">{dp.id}</span></h2>
        <p className="text-amber-200 mb-2">Category: {dp.category}</p>
        <p className="mb-4 text-gray-200">{dp.description}</p>
        <h3 className="text-lg font-semibold mt-6 mb-2 text-white">Elements</h3>
        <ul className="mb-4 list-disc pl-6">
          {Array.isArray(dp.elements) ? dp.elements.map((el, i) => (
            <li key={i} className="mb-1 text-gray-200"><span className="font-medium text-amber-200">{el.name}:</span> {el.description}</li>
          )) : null}
        </ul>
        <h3 className="text-lg font-semibold mt-6 mb-2 text-white">Aligned Community Submissions</h3>
        
        {/* Stats for this DP */}
        <div className="flex items-center gap-6 mb-4 text-sm">
          <div className="flex items-center gap-2 text-cyan-400">
            <MessageCircle className="h-4 w-4" />
            <span>{relatedSubmissions.reduce((total, sub) => total + (Array.isArray(sub.directlyAddressedDPs) ? sub.directlyAddressedDPs.filter(alignment => {
              const dpNumber = alignment.dp.match(/^DP(\d+)/)?.[1];
              const targetNumber = dp.id.match(/^DP(\d+)/)?.[1];
              return dpNumber && targetNumber && dpNumber === targetNumber;
            }).length : 0), 0)} alignments</span>
          </div>
          <div className="flex items-center gap-2 text-amber-400">
            <Lightbulb className="h-4 w-4" />
            <span>{relatedSubmissions.reduce((total, sub) => total + (Array.isArray(sub.clarificationsExtensions) ? sub.clarificationsExtensions.filter(ce => {
              const ceDpNumber = ce.dp.match(/^DP(\d+)/)?.[1];
              const targetNumber = dp.id.match(/^DP(\d+)/)?.[1];
              return ceDpNumber && targetNumber && ceDpNumber === targetNumber && ce.type === 'Extension';
            }).length : 0), 0)} extensions</span>
          </div>
          <div className="flex items-center gap-2 text-yellow-400">
            <HelpCircle className="h-4 w-4" />
            <span>{relatedSubmissions.reduce((total, sub) => total + (Array.isArray(sub.clarificationsExtensions) ? sub.clarificationsExtensions.filter(ce => {
              const ceDpNumber = ce.dp.match(/^DP(\d+)/)?.[1];
              const targetNumber = dp.id.match(/^DP(\d+)/)?.[1];
              return ceDpNumber && targetNumber && ceDpNumber === targetNumber && ce.type === 'Clarification';
            }).length : 0), 0)} clarifications</span>
          </div>
        </div>
        
        {relatedSubmissions.length === 0 ? (
          <p className="text-gray-400">No submissions aligned to this property.</p>
        ) : (
          <ul className="space-y-3">
            {relatedSubmissions.map((sub, i) => (
              <li key={i}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                <button 
                  className="text-cyan-400 hover:text-cyan-300 hover:underline font-medium text-left" 
                  onClick={() => {
                    // console.log('=== SETTING SUBMISSION DETAIL FROM DP DETAIL ===');
                    // console.log('Submission object being set:', sub);
                    // console.log('Submission directlyAddressedDPs:', sub.directlyAddressedDPs);
                    // console.log('Submission clarificationsExtensions:', sub.clarificationsExtensions);
                    // console.log('Opening submission detail for:', sub.title);
                    openSubmissionDetail(sub);
                    setDpDetail(null);
                  }}
                >
                                      {sub.title}
                </button>
                                  <div className="text-xs text-gray-400">By: {(sub.submitter.firstName || sub.submitter.lastName) ? `${sub.submitter.firstName || ''} ${sub.submitter.lastName || ''}`.trim() : 'Anon'}</div>
                  </div>
                  <div className="flex items-center gap-2 ml-2">
                    <button
                      onClick={() => toggleComments(`submission-${sub.id}`)}
                      className="flex items-center gap-1 px-1 py-0.5 rounded text-xs transition-colors text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10"
                    >
                      <MessageCircle className="h-3 w-3" />
                      <span>5</span>
                    </button>
                    <div className="flex items-center gap-1">
                      <button className="flex items-center gap-1 px-1 py-0.5 text-xs text-gray-400 hover:text-green-400">
                        <ThumbsUp className="h-3 w-3" />
                        <span>{Math.floor(Math.random() * 50)}</span>
                      </button>
                      <button className="flex items-center gap-1 px-1 py-0.5 text-xs text-gray-400 hover:text-red-400">
                        <ThumbsDown className="h-3 w-3" />
                        <span>{Math.floor(Math.random() * 20)}</span>
                      </button>
                    </div>
                  </div>
                </div>
                {/* Show alignment summary if present */}
                {(() => {
                  const alignment = Array.isArray(sub.directlyAddressedDPs) ? sub.directlyAddressedDPs.find(a => 
                    a.dp === dp.id || 
                    a.dp === dp.name || 
                    a.dp.startsWith(dp.id + ' ') ||
                    a.dp.includes(dp.name)
                  ) : null;
                  return alignment && alignment.summary ? (
                    <div className="text-sm text-amber-300 mt-1">{alignment.summary}</div>
                  ) : null;
                })()}
                {/* Show clarifications/extensions for this DP from this submission */}
                <div className="ml-2 mt-1">
                  {Array.isArray(sub.clarificationsExtensions) ? sub.clarificationsExtensions.filter(c => {
                    // Extract DP number from both strings for exact matching
                    const cDpNumber = c.dp.match(/^DP(\d+)/)?.[1];
                    const targetDpNumber = dp.id.match(/^DP(\d+)/)?.[1];
                    
                    // Exact DP number match
                    if (cDpNumber && targetDpNumber && cDpNumber === targetDpNumber) {
                      return true;
                    }
                    
                    // Fallback to original logic for non-numeric cases
                    return c.dp === dp.id || c.dp.includes(dp.name);
                  }).map((c, j) => (
                    <div key={j} className="text-sm mb-1">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                      <span className="font-semibold text-amber-300">{c.type}:</span> <span className="font-semibold text-white">{c.title}</span>
                      <div className="text-gray-200 ml-2">
                        <div><span className="italic text-amber-200">{c.type}:</span> {c.content}</div>
                        <div className="text-xs text-amber-300">Why it matters: {c.whyItMatters}</div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2 ml-2">
                          <button
                            onClick={() => toggleComments(`${c.type.toLowerCase()}-${sub.id}-${j}`)}
                            className="flex items-center gap-1 px-1 py-0.5 rounded text-xs transition-colors text-gray-400 hover:text-amber-400 hover:bg-amber-500/10"
                          >
                            <MessageCircle className="h-3 w-3" />
                            <span>2</span>
                          </button>
                          <div className="flex items-center gap-1">
                            <button className="flex items-center gap-1 px-1 py-0.5 text-xs text-gray-400 hover:text-green-400">
                              <ThumbsUp className="h-3 w-3" />
                              <span>{Math.floor(Math.random() * 20)}</span>
                            </button>
                            <button className="flex items-center gap-1 px-1 py-0.5 text-xs text-gray-400 hover:text-red-400">
                              <ThumbsDown className="h-3 w-3" />
                              <span>{Math.floor(Math.random() * 10)}</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  )) : null}
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    );
  };

  // Submission Detail Modal
  const renderSubmissionDetail = (sub: Submission) => {
    // console.log('=== RENDER SUBMISSION DETAIL START ===');
    // console.log('Submission object:', sub);
    // console.log('Submission type:', typeof sub);
    // console.log('Submission keys:', Object.keys(sub));
    
    try {
      // console.log('=== CREATING SAFE SUBMISSION ===');
      // Defensive checks to ensure all array properties are actually arrays
      const safeSubmission = {
        ...sub,
        directlyAddressedDPs: Array.isArray(sub.directlyAddressedDPs) ? sub.directlyAddressedDPs : [],
        clarificationsExtensions: Array.isArray(sub.clarificationsExtensions) ? sub.clarificationsExtensions : []
      };
      // console.log('Safe submission created:', safeSubmission);
      // console.log('Safe directlyAddressedDPs:', safeSubmission.directlyAddressedDPs);
      // console.log('Safe clarificationsExtensions:', safeSubmission.clarificationsExtensions);

      // console.log('=== RENDERING SUBMISSION DETAIL ===');
      return (
        <div>
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-white">{safeSubmission.title}</h2>
          </div>

          {/* Submitter Info */}
          <div className="mb-4">
            <div className="flex items-center justify-between">
              <p className="text-gray-300">
                By: {(safeSubmission.submitter.firstName || safeSubmission.submitter.lastName) 
                  ? `${safeSubmission.submitter.firstName || ''} ${safeSubmission.submitter.lastName || ''}`.trim() 
                  : 'Anonymous'}
              </p>
              <div className="flex items-center gap-4">
                                          <VoteButtons
                            elementId={safeSubmission.id}
                            elementType="submission"
                            submissionId={safeSubmission.id}
                            initialUpvotes={safeSubmission.upvotes}
                            initialDownvotes={safeSubmission.downvotes}
                            userVote={voteCounts[safeSubmission.id]?.userVote?.toLowerCase() as 'up' | 'down' | null || null}
                          />
              </div>
            </div>
          </div>



          {/* Overview */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-2">Overview</h3>
            <p className="text-gray-300 leading-relaxed">{safeSubmission.overview}</p>
          </div>

          {/* Source Link */}
          {safeSubmission.sourceLink && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-2">Source</h3>
              <a 
                href={safeSubmission.sourceLink} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-cyan-400 hover:text-cyan-300 underline"
              >
                {safeSubmission.sourceLink}
              </a>
            </div>
          )}

          {/* Directly Addressed DPs */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">Directly Addressed Desirable Properties</h3>
            <div className="space-y-3">
              {safeSubmission.directlyAddressedDPs && safeSubmission.directlyAddressedDPs.length > 0 ? (
                safeSubmission.directlyAddressedDPs.map((dp: { dp: string; summary: string }, dpIndex: number) => {
                  // console.log('=== MAPPING DIRECTLY ADDRESSED DP ===');
                  // console.log('DP:', dp);
                  // console.log('DP Index:', dpIndex);
                  return (
                    <div key={dpIndex} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium text-cyan-400">{dp.dp}</h4>
                        <div className="flex items-center gap-2">
                          <div className="flex items-center gap-2">
                            <VoteButtons
                              elementId={`${safeSubmission.id}-dp-${dpIndex}`}
                              elementType="alignment"
                              submissionId={safeSubmission.id}
                              initialUpvotes={voteCounts[`${safeSubmission.id}-dp-${dpIndex}`]?.upvotes || 0}
                              initialDownvotes={voteCounts[`${safeSubmission.id}-dp-${dpIndex}`]?.downvotes || 0}
                              userVote={voteCounts[`${safeSubmission.id}-dp-${dpIndex}`]?.userVote?.toLowerCase() as 'up' | 'down' | null || null}
                              onVoteChange={(vote) => {
                                setVoteCounts(prev => ({
                                  ...prev,
                                  [`${safeSubmission.id}-dp-${dpIndex}`]: {
                                    upvotes: prev[`${safeSubmission.id}-dp-${dpIndex}`]?.upvotes || 0,
                                    downvotes: prev[`${safeSubmission.id}-dp-${dpIndex}`]?.downvotes || 0,
                                    userVote: prev[`${safeSubmission.id}-dp-${dpIndex}`]?.userVote || null,
                                    ...(vote === 'up' ? { upvotes: (prev[`${safeSubmission.id}-dp-${dpIndex}`]?.upvotes || 0) + 1 } : {}),
                                    ...(vote === 'down' ? { downvotes: (prev[`${safeSubmission.id}-dp-${dpIndex}`]?.downvotes || 0) + 1 } : {})
                                  }
                                }));
                              }}
                            />
                            <button
                              onClick={() => toggleComments(`${safeSubmission.id}-dp-${dpIndex}`)}
                              className="flex items-center gap-1 text-gray-400 hover:text-cyan-400 transition-colors"
                            >
                              <MessageCircle className="h-4 w-4" />
                              <span className="text-xs">{(() => {
                  const count = commentCounts[`${safeSubmission.id}-dp-${dpIndex}`] || 0;
                  if (safeSubmission.id === 'cmds3zumt00s3h2108o3bojs9') {
                    console.log('ðŸ”´ [MainPage] Displaying DP comment count for Scott Yates submission:', count, 'elementId:', `${safeSubmission.id}-dp-${dpIndex}`);
                  }
                  return count;
                })()}</span>
                            </button>
                          </div>
                        </div>
                      </div>
                      <p className="text-gray-300 text-sm mb-3">{dp.summary}</p>
                      
                      {/* Comments for DP - Collapsible */}
                      {expandedComments.has(`${safeSubmission.id}-dp-${dpIndex}`) && (
                        <div className="mt-3">
                          <CommentSection
                            elementId={`${safeSubmission.id}-dp-${dpIndex}`}
                            elementType="alignment"
                            submissionId={safeSubmission.id}
                            onCommentCountChange={(count) => updateCommentCount(`${safeSubmission.id}-dp-${dpIndex}`, count)}
                          />
                        </div>
                      )}
                    </div>
                  );
                })
              ) : (
                <p className="text-gray-400 italic">No directly addressed desirable properties listed.</p>
              )}
            </div>
          </div>

          {/* Clarifications and Extensions */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">Clarifications and Extensions</h3>
            <div className="space-y-4">
              {safeSubmission.clarificationsExtensions && safeSubmission.clarificationsExtensions.length > 0 ? (
                safeSubmission.clarificationsExtensions.map((item: { dp: string; type: string; title: string; content: string; whyItMatters: string }, itemIndex: number) => {
                  // console.log('=== MAPPING CLARIFICATIONS EXTENSIONS ===');
                  // console.log('Item:', item);
                  // console.log('Item Index:', itemIndex);
                  return (
                    <div key={itemIndex} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <span className={`px-2 py-1 text-xs rounded ${
                            item.type === 'Clarification' 
                              ? 'bg-blue-600 text-blue-100' 
                              : 'bg-green-600 text-green-100'
                          }`}>
                            {item.type}
                          </span>
                          <h4 className="font-medium text-cyan-400">{item.title}</h4>
                        </div>
                        <div className="flex items-center gap-2">
                          <VoteButtons
                            elementId={`${safeSubmission.id}-ce-${itemIndex}`}
                            elementType={item.type.toLowerCase() as 'clarification' | 'extension'}
                            submissionId={safeSubmission.id}
                            initialUpvotes={voteCounts[`${safeSubmission.id}-ce-${itemIndex}`]?.upvotes || 0}
                            initialDownvotes={voteCounts[`${safeSubmission.id}-ce-${itemIndex}`]?.downvotes || 0}
                                                          userVote={voteCounts[`${safeSubmission.id}-ce-${itemIndex}`]?.userVote?.toLowerCase() as 'up' | 'down' | null || null}
                            onVoteChange={(vote) => {
                              setVoteCounts(prev => ({
                                ...prev,
                                [`${safeSubmission.id}-ce-${itemIndex}`]: {
                                  upvotes: prev[`${safeSubmission.id}-ce-${itemIndex}`]?.upvotes || 0,
                                  downvotes: prev[`${safeSubmission.id}-ce-${itemIndex}`]?.downvotes || 0,
                                  userVote: prev[`${safeSubmission.id}-ce-${itemIndex}`]?.userVote || null,
                                  ...(vote === 'up' ? { upvotes: (prev[`${safeSubmission.id}-ce-${itemIndex}`]?.upvotes || 0) + 1 } : {}),
                                  ...(vote === 'down' ? { downvotes: (prev[`${safeSubmission.id}-ce-${itemIndex}`]?.downvotes || 0) + 1 } : {})
                                }
                              }));
                            }}
                          />
                          <button
                            onClick={() => toggleComments(`${safeSubmission.id}-ce-${itemIndex}`)}
                            className="flex items-center gap-1 text-gray-400 hover:text-cyan-400 transition-colors"
                          >
                            <MessageCircle className="h-4 w-4" />
                            <span className="text-xs">{(() => {
                  const count = commentCounts[`${safeSubmission.id}-ce-${itemIndex}`] || 0;
                  if (safeSubmission.id === 'cmds3zumt00s3h2108o3bojs9') {
                    console.log('ðŸ”´ [MainPage] Displaying CE comment count for Scott Yates submission:', count, 'elementId:', `${safeSubmission.id}-ce-${itemIndex}`);
                  }
                  return count;
                })()}</span>
                          </button>
                        </div>
                      </div>
                      <p className="text-gray-300 text-sm mb-2">{item.dp}</p>
                      <p className="text-gray-300 text-sm mb-3">{item.content}</p>
                      <p className="text-gray-300 text-sm mb-3">
                        <span className="text-gray-400">Why it matters:</span> {item.whyItMatters}
                      </p>
                      


                      {/* Comments for Clarification/Extension - Collapsible */}
                      {expandedComments.has(`${safeSubmission.id}-ce-${itemIndex}`) && (
                        <div className="mt-3">
                          <CommentSection
                            elementId={`${safeSubmission.id}-ce-${itemIndex}`}
                            elementType={item.type.toLowerCase() as 'clarification' | 'extension'}
                            submissionId={safeSubmission.id}
                            onCommentCountChange={(count) => updateCommentCount(`${safeSubmission.id}-ce-${itemIndex}`, count)}
                          />
                        </div>
                      )}
                    </div>
                  );
                })
              ) : (
                <p className="text-gray-400 italic">No clarifications or extensions listed.</p>
              )}
            </div>
          </div>

          {/* Comments Section */}
          <div className="comments-section mt-4">
            <h3 className="text-lg font-semibold text-white mb-4">Comments</h3>
            <CommentSection
              elementId={safeSubmission.id}
              elementType="submission"
              submissionId={safeSubmission.id}
              onCommentCountChange={(count) => updateCommentCount(safeSubmission.id, count)}
            />
          </div>
        </div>
      );
    } catch (error) {
      console.error('=== ERROR IN RENDER SUBMISSION DETAIL ===');
      console.error('Error:', error);
      console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');
      console.error('Submission that caused error:', sub);
      return (
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-white">Submission Details</h2>
            <button
              onClick={() => setSubmissionDetail(null)}
              className="text-gray-400 hover:text-gray-300 transition-colors"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
          <div className="bg-red-900 border border-red-700 rounded-lg p-4 mb-4">
            <h3 className="text-lg font-semibold text-red-200 mb-2">Error Loading Submission</h3>
            <p className="text-red-300">
              There was an error loading the submission details. Please try refreshing the page or contact support if the problem persists.
            </p>
            <p className="text-red-400 text-sm mt-2">
              Error: {error instanceof Error ? error.message : 'Unknown error'}
            </p>
          </div>
          <div className="text-gray-300">
            <p><strong>Title:</strong> {sub.title}</p>
            <p><strong>Overview:</strong> {sub.overview}</p>
          </div>
        </div>
      );
    }
  };

  return (
    </div>); }
